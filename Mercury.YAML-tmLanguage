# [PackageDev] target_format: plist, ext: tmLanguage
# c.f.: http://manual.macromates.com/en/language_grammars
# c.f.: http://www.apeth.com/nonblog/stories/textmatebundle.html
---
fileTypes: [m,moo]
name: Mercury
scopeName: source.mercury
uuid: A3E186F8-CF20-4983-B132-209EDF43E3DE
repository:
  block_comment:
    name: comment.block.source.mercury
    begin: /\*
    captures:
      '0': {name: punctuation.definition.comment.source.mercury}
    end: \*/
  
  line_comment:
    name: comment.comment.source.mercury
    begin: (^[ \t]+)?(%([-]+%)?)
    beginCaptures:
      '1': {name: punctuation.whitespace.comment.leading.source.mercury}
      '2': {name: comment.line.percentage.source.mercury}
    end: (?!\G)
    patterns:
    - match: '[ \t]+(XXX|TODO|FIXME|WARNING|NOTE|Note:)\b'
      captures:
        '1': {name: constant.language.warn.source.mercury}
    - match: '.*'

  string_quoted_double:
    name: string.quoted.double.source.mercury
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.literal.string.begin.source.mercury}
    end: '"'
    endCaptures:
      '0': {name: punctuation.literal.string.end.source.mercury}
    patterns:
    - {match: \\., name: constant.character.escape.source.mercury}
    - {match: '""', name: constant.character.escape.quote.source.mercury}

  decl_keywords:
    {match: '\b(is|where)\b', name: keyword.control.declaration.source.mercury}

  determ_decl:
    {match: '\b(multi|cc_multi|det|semidet|nondet|errorneous)\b',
     name: constant.language.determ.source.mercury}
    
  logic_consts:
    {match: '\b(yes|no|true|false|(semidet_)?succeed|(semidet_)?fail)\b',
     name: constant.language.logic.source.mercury}
  
  purity_level:
    match: (im|semi)pure
    name: storage.type

  impl_defined_variable:
    {match: '[$][a-zA-Z0-9_]*\b', name: variable.language.source.mercury}

  declarations:
    patterns:
    - match: (^[ \t]*:-) ((use|include|end|import|)_module|module|func|pred|type(class)?|inst(ance)?|mode|interface|implementation)\b
      captures:
        '1': {name: keyword.operator.logic.source.mercury}
      name: keyword.control.declaration.source.mercury
    - match: (^[ \t]*:-) (pragma) (inline|foreign_(export(_enum)?|enum)|type_spec)\b
      captures:
        '1': {name: keyword.operator.logic.source.mercury}
        '2': {name: keyword.control.pragma.source.mercury}
      name: constant.language.pragma.source.mercury
    
  common_ops:
    patterns:
    - match: (-(?![>-])|[+](?![+])|[*][*]?|/(?![\\/])|//|\\(?![/=]))
      name: keyword.operator.arithmetic.source.mercury
    - match: (=<|>=|<(?![=])|(?![-])>)
      name: keyword.operator.comparison.source.mercury
    - match: (<=>|<=|=>|\\=|==|:-|=(?![=<>])|,|;|->|/\\(?![=])|\\/|@)
      name: keyword.operator.logic.source.mercury
    - match: (-->|--->|[+][+](?![+])|::|:=|![\.:]?|\||`|\^)
      name: keyword.operator.other.source.mercury
    - match: (\(|\)|\[|\])
      name: keyword.operator.list.source.mercury
    - match: \.(?=[ \t]*($|%))
      name: keyword.operator.terminator.source.mercury

  number:
    match: \b(0[0-7]*|0'.|[1-9][0-9]*|\.[0-9]+([eE][0-9]+)?|0[xX][0-9a-fA-F]+|0[bB][01]+)\b
    name: constant.numeric.source.mercury
  
patterns:
- name: string.quoted.double.source.mercury
  include: '#string_quoted_double'

- name: string.quoted.single.source.mercury
  begin: ''''
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.source.mercury}
  end: ''''
  endCaptures:
    '0': {name: punctuation.definition.string.end.source.mercury}
  patterns:
  - {match: \\., name: constant.character.escape.source.mercury}
  - {match: '''''', name: constant.character.escape.quote.source.mercury}

- include: '#block_comment'
- include: '#line_comment'
- include: '#decl_keywords'
- include: '#purity_level'
- include: '#impl_defined_variable'
- include: '#number'
- include: '#declarations'
# declarations come before common_ops, since declarations relies on :-
- include: '#common_ops'